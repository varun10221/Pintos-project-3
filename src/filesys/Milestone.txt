         +-------------------------+
         |    CS 140               |
         | PROJECT 4: MILESTONE    |
         |     DESIGN DOCUMENT     |
         +-------------------------+

---- GROUP ----

Jamie Davis <davisjam@vt.edu>
Varun Subramanian <varuns92@vt.edu>

To successfully implement this project, you will need to design a number of on-disk 
data structures to represent files. In this milestone, you're asked to describe them. 
Although you are free to implement your file system in whichever way, we assume 
a traditional, Unix-style design.

1. Describe the format of the on-disk inode. Use a C struct.

/* Must sum to the number of addresses available in the inode_disk. */
#define ADDRESS_LEN 4
#define INODE_SIZE BLOCK_SECTOR_SIZE
#define INODE_N_ADDRESSES (INODE_SIZE - 3*ADDRESS_LEN)/ADDRESS_LEN /* Number of addresses an inode can store. */

#define INODE_N_INDIRECT_1_BLOCKS 16   /* Number of addresses of blocks of direct blocks. */
#define INODE_N_INDIRECT_2_BLOCKS 15   /* Number of addresses of INDIRECT_1 blocks. */
#define INODE_N_INDIRECT_3_BLOCKS 1    /* Number of addresses of INDIRECT_2 blocks. */
#define INODE_N_DIRECT_BLOCKS (INODE_N_ADDRESSES - INODE_N_INDIRECT_3 - INODE_N_INDIRECT_2 - INODE_N_INDIRECT_1) /* Number of addresses of data blocks. */

/* For processing the info_and_cksum field present in metadata structures. */
#define METAINFO_MASK 0x7
struct metainfo_s
{
  int8_t info;
  unsigned cksum;
};

/* Inodes can be one of these types. */
enum inode_type
{
  FILE,
  DIRECTORY
};

/* On-disk inode.
   Must be exactly BLOCK_SECTOR_SIZE bytes long. */
struct inode_disk
{
  uint32_t info_and_cksum;   /* Bits 0-7 are an enum inode_type. Bits 8-31 are a cksum of the metadata in the inode. */
  unsigned magic;       /* Magic number. */
  off_t length;         /* File size in bytes. */
  /* INODE_N_ADDRESSES addresses. */
  uint32_t direct_block      [INODE_N_DIRECT_BLOCKS];     /* Each is the address of a block of data. */
  uint32_t indirect_1_blocks [INODE_N_INDIRECT_1_BLOCKS]; /* Each is the address of a block of direct blocks. */
  uint32_t indirect_2_blocks [INODE_N_INDIRECT_2_BLOCKS]; /* Each is the address of a block of indirect_1 blocks. */
  uint32_t indirect_3_blocks [INODE_N_INDIRECT_3_BLOCKS]; /* Each is the address of a block of indirect_2 blocks. */
};

/* On-disk indirect block.
   Must be exactly METADATA_BLOCKSIZE bytes long. */
#define INDIRECT_BLOCK_N_ADDRESSES (METADATA_BLOCKSIZE - 1*ADDRESS_LEN)/ADDRESS_LEN /* The number of addresses contained in an indirect blcok. */
struct indirect_block
{
  uint32_t info_and_cksum; /* Bits 0-7 are an integer for the indirect level. Bits 8-31 are a cksum of the addresses. */
  uint32_t blocks [INDIRECT_BLOCK_N_ADDRESSES]; /* The block addresses tracked by this indirect block. */
}

2. How are inodes numbered/addressed on disk?

Inodes are numbered by the sector number at which they reside.
They are addressed by reading the data from that sector number.

3. What is the blocksize of your filesystem?

#define DATA_BLOCKSIZE 8*BLOCK_SECTOR_SIZE     /* 4KB. For data. */
#define METADATA_BLOCKSIZE 4*BLOCK_SECTOR_SIZE /* 2KB. For indirect blocks. */

According to http://research.microsoft.com/pubs/72896/fast07-final.pdf, about 50% of files in a file system
are less than or equal to about 4KB in size.
The blocksize will therefore be a 8*BLOCK_SECTOR_SIZE (4KB) bytes, though this is a compile-time constant and
can be changed as desired. This means that just one direct block can address 4KB.
This minimizes the amount of metadata that needs to be read to access (the ~50% of) files whose size <= 4KB,
and reduces the amount of metadata needed for larger but still relatively small files.

4. Describe your index data structure to keep track of where a file's blocks 
   are located. If you're using traditional index blocks, explain how many 
   sector/block numbers are stored in each index block. Show the math to 
   support the requirements listed in Section 5.3.2

Each block number requires 4 bytes to address. 
An index block of size METADATA_BLOCKSIZE can therefore store 2048/4 = 512 block numbers.
(4 bytes will be used to store indirection level and cksum, but the math below assumes we 
are using all 512 4-byte sections for block numbers. 

I'm using traditional index blocks. 
An inode has INODE_N_DIRECT_BLOCKS direct blocks that point to data blocks. 
An inode has INODE_N_INDIRECT_1_BLOCKS indirect blocks that point to direct blocks.
An inode has INODE_N_INDIRECT_2_BLOCKS doubly-indirect blocks that point to indirect blocks.
An inode has INODE_N_INDIRECT_3_BLOCKS triply-indirect blocks that point to doubly-indirect blocks.

With INODE_N_DIRECT_BLOCKS 93, the inode can directly address 93*DATA_BLOCKSIZE = 93*4KB ~= 380 KB.
Using its 16 indirect blocks, it can address 16*(128*DATA_BLOCKSIZE) = 8192KB = 8MB
Using its 15 doubly-indirect blocks, it can address 15*(128*128*DATA_BLOCKSIZE) ~= 1GB
Using its 1 triply-indirect block, it can address 1*(128*128*128*DATA_BLOCKSIZE) = 8GB

In total the inode can address 8GB + 1GB + 8MB + 380KB ~= 9GB.
This is far more than the 8MB minimum requirement.
Such a size should give us good practice for working with this storage mechanism.

5. Based on your index design, describe the algorithm for finding a block's
   on-disk location based on the offset.

Given offset X, the block number is X / DATA_BLOCKSIZE.
If the block number is < INODE_N_DIRECT_BLOCKS, then the address is in the direct_block array of the inode.
Otherwise, block_number -= INODE_N_DIRECT_BLOCKS, to make it relative to the set of indirect_1 blocks. 

An indirect_1 block can address 511 data blocks, and there are 16 such blocks.
If the block number is < 511*INODE_N_INDIRECT_1_BLOCKS, then the address is indexed by the appropriate indirect_1 block.
  Reading that indirect block will give us the correct block address.
Otherwise, block_number -= 511*INODE_N_INDIRECT__1_BLOCKS, to make it relative to the set of indirect_2 blocks. 

An indirect_2 block can address 511 indirect blocks, and there are 15 such blocks.
If the block number is < 511*INODE_N_INDIRECT_2_BLOCKS, then the address is indexed by the appropriate indirect_2 block.
  Reading that indirect_2 block will give us the correct indirect_1 block to read. Reading that block gives us the
  address of the data.
Otherwise, block_number -= 511*INODE_N_INDIRECT_2_BLOCKS, to make it relative to the set of indirect_3 blocks. 

An indirect_3 block can address 511 indirect blocks, and there is 1 such block.
If the block number is < 511*INODE_N_INDIRECT_3_BLOCKS, then the address is indexed by the appropriate indirect_2 block.
  Reading that indirect_2 block will give us the correct indirect_1 block to read. Reading that block gives us the
  address of the data.
Otherwise, the offset is too large to be addressed by the file, and we fail the request.

6. Do you plan to implement sparse files (that is, the on-demand allocation 
   of blocks/index blocks)?

Yes. 

Suppose we are accessing an offset and the index for it is NULL. 
If doing a read, return zeros. 
If doing a write, allocate the metadata required the index the offset, then write to the
  newly allocated block.

7. Describe the (on-disk) directory data structures you'll use. Do you plan 
   on changing the provided implementation and if so, for what benefit? 

We plan to use a linear list for simplicity. If we have time we may try a more advanced
structure -- a hash table with recursive split ordering, or a B+ tree.
